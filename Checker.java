import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class Checker {
  public static void mainScan(String website, String operatingSystem, String cpu) throws IOException {    
    Document doc = Jsoup.connect(website).get();
    Elements files = doc.select("td.content");
    
    for (Element src : files) {
    	if (!src.text().equals("Failed to load latest commit information.")) {
    		String web = website + "/" + src.text();
        	websiteScan(web, operatingSystem, cpu);
        	System.out.println();
        	System.out.println();
        	System.out.println();
        	System.out.println();
        	System.out.println();
    	}
    }
  }
  public static void websiteScan(String website, String operatingSystem, String cpu) throws IOException {
	  Document doc = Jsoup.connect(website).get();
	  Elements file = doc.select("td.js-file-line");
	  
	  ArrayList<String> text = new ArrayList<String>();
	  
	  for (Element src : file) {
		  text.add(src.text());
	  }
	  
	  Scanner reader = new Scanner(System.in);
	  System.out.println("Would you like to see your result?");
	  String input = reader.next();
	  if (input.equals("yes") || input.equals("y")) {
		  for (int i = 0; i < text.size(); i++) {
			  if (text.get(i).toLowerCase().contains("windows")) {
				  for (int j = 0; j < text.size(); j++) {
					  System.out.println(text.get(j));
				  }
			  }
		  }
	  }
	  reader.close();
  }
  public static void main(String[] args) throws IOException {
    // list everything System.getProperties().list(System.out);
    // declares variables and prints to check
    String operatingSystem = System.getProperty("os.name");
    String cpu = System.getProperty("sun.cpu.isalist");
    String website = "";
    
    if (operatingSystem.toLowerCase().contains("mac")) {
    	website = "https://github.com/offensive-security/exploit-database/tree/master/exploits/macos";
    }
    else if (cpu.toLowerCase().equals("amd64")) {
      if (operatingSystem.toLowerCase().contains("windows")) {
    	website = "https://github.com/offensive-security/exploit-database/tree/master/exploits/windows_x86-64/local";
      }
      else if (operatingSystem.contains("linux")) {
    	website = "https://github.com/offensive-security/exploit-database/tree/master/exploits/linux_x86-64";
      }
    }
    else if (operatingSystem.toLowerCase().equals("amd32")) { // whatever 32bit is
      if (operatingSystem.toLowerCase().equals("windows")) {
    	website = "https://github.com/offensive-security/exploit-database/tree/master/exploits/windows_x86";
      }
      else if (operatingSystem.toLowerCase().equals("linux")) {
    	website = "https://github.com/offensive-security/exploit-database/tree/master/exploits/linux_x86";
      }
    }
    mainScan(website, operatingSystem, cpu);
  }
}
